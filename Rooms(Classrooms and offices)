class Room:

    rooms = []

    def __init__(self, type, roomID, capacity):
        self.capacity = capacity
        self.roomID = roomID
        self.type = type
        Room.rooms.append(self)

    def Print(self):
        print("The room is", self.roomID, "and it is a", self.type)


    @classmethod
    def getRooms(cls):
        for room in cls.rooms:
            room.print()


    @classmethod
    def getRoomsByType(cls, type):
        for room in cls.rooms:
            if room.type == type:
                room.print()

    @classmethod
    def getAvailableRooms(cls):
        ids = []
        for key in cls.rooms:
            ids.append(key)
        return str.join(",", ids)


    @classmethod
    def getRoomById(cls, ID):
        if ID in cls.rooms.keys():
            return cls.rooms[ID]
        print("the room cannot be found")
        return False


class ClassRoom(Room):

    type = "Classroom"

    def __init__(self, roomID, capacity):
        super().__init__(ClassRoom.type, roomID, capacity)
        self.schedule = []


    def Reserve(self, start, end):
        if (self.isFree(start, end)):
            timeslot = {"start": start, "end": end}
            self.schedule.append(timeslot)
            return True
        else:
            return False

    def isFree(self, start, end):
        is_free = True
        for slot in self.schedule:
            if end < slot["start"] or start > slot["end"]:
                pass
            else:
                is_free = False
                break
        return is_free

    @classmethod
    def getscheduleofAllClsRooms(cls):
        for key in cls.rooms:
            currRoom = cls.rooms[key]
            print(currRoom.roomID, ' :')
            print("capacity: ", currRoom.capacity)
            print("schedule: ", currRoom.schedule)


    @staticmethod
    def isValidSlot(start, end):
        return start < end




class Office(Room):

    type = "Office"

    def __init__(self, roomID, capacity):
        super().__init__(Office.type, roomID, capacity)
        self.faculty = []

    def facultyMembers(self):
        while True:
            member = input("please input faculty member names in the selected class")
            if member not in Room.getRoomsByType("Office"):
                self.faculty.append(member)
            else:
                print("The member is already in the list")

def main():
    ClassRoom("208MB", 50)
    ClassRoom("300W PAB", 100)

    Office("114E PAB", 3)
    Office("110E PAB", 4)
    Office("001E PAB", 1)

    print("dear user, here you can reserve an office or a classroom.Available IDs are:\n",
          Office.getAvailableRooms(), "These rooms are classrooms:",
          Room.getRoomsByType("Classroom"), "and these are offices:", Room.getRoomsByType("office"))


    while True:

        IDchoice = input("Dear user please choose an ID from above.")
        currRoom = Room.getRoomById(IDchoice)

        if IDchoice == Room.getRoomsByType("Classroom"):
            start = int(input("input the starting time"))
            end = int(input("input the ending time"))

            if (Classroom.isValidSlot(start, end)):
                if currRoom.isFree(start, end) == False:
                    print("Not available for ", IDchoice.roomID)
                else:
                    currClassroom.Reserve(start, end)
                    print("You just reserved the classroom", IDchoice.roomID, " from ", start, " to ", end)

                    print(IDchoice.schedule)

            else:
                print("The slot is invalid")

        elif IDchoice == Room.getRoomsByType("Office"):
            print(Office.facultyMembers())


        else:
            print("Chose the room wrong")



main()
